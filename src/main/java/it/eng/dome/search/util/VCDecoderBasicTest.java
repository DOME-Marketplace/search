package it.eng.dome.search.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

public class VCDecoderBasicTest {

    private static final Logger log = LoggerFactory.getLogger(VCDecoderBasicTest.class);

    public static void main(String[] args) {
        try {
            // Esempio di VC JWT (payload simulato)
            // Header: {"alg":"none"} -> Base64URL: eyJhbGciOiJub25lIn0
            // Payload: {"sub":"12345","name":"Mario Rossi","vc":{"type":["VerifiableCredential"],"credentialSubject":{"id":"did:example:123","degree":"Master"}}}
            // Base64URL payload simulata (senza signature)
            String vcToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6Ik1JSFFNSUczcElHME1JR3hNU0l3SUFZRFZRUUREQmxFU1VkSlZFVk1JRlJUSUVGRVZrRk9RMFZFSUVOQklFY3lNUkl3RUFZRFZRUUZFd2xDTkRjME5EYzFOakF4S3pBcEJnTlZCQXNNSWtSSlIwbFVSVXdnVkZNZ1EwVlNWRWxHU1VOQlZFbFBUaUJCVlZSSVQxSkpWRmt4S0RBbUJnTlZCQW9NSDBSSlIwbFVSVXdnVDA0Z1ZGSlZVMVJGUkNCVFJWSldTVU5GVXlCVFRGVXhFekFSQmdOVkJBY01DbFpoYkd4aFpHOXNhV1F4Q3pBSkJnTlZCQVlUQWtWVEFoUWdhQUtFL3owd3paUzM5Y2J5SWZ1TGdrdHFHdz09IiwieDV0I1MyNTYiOiJIb0pEWGJzb2xaOTIwSWZHZWxqaEVFekxxOHZBTVBHTUZ4T2VRWUlIVEZnIiwieDVjIjpbIk1JSUcyVENDQk1HZ0F3SUJBZ0lVSUdnQ2hQODlNTTJVdC9YRzhpSDdpNEpMYWhzd0RRWUpLb1pJaHZjTkFRRU5CUUF3Z2JFeElqQWdCZ05WQkFNTUdVUkpSMGxVUlV3Z1ZGTWdRVVJXUVU1RFJVUWdRMEVnUnpJeEVqQVFCZ05WQkFVVENVSTBOelEwTnpVMk1ERXJNQ2tHQTFVRUN3d2lSRWxIU1ZSRlRDQlVVeUJEUlZKVVNVWkpRMEZVU1U5T0lFRlZWRWhQVWtsVVdURW9NQ1lHQTFVRUNnd2ZSRWxIU1ZSRlRDQlBUaUJVVWxWVFZFVkVJRk5GVWxaSlEwVlRJRk5NVlRFVE1CRUdBMVVFQnd3S1ZtRnNiR0ZrYjJ4cFpERUxNQWtHQTFVRUJoTUNSVk13SGhjTk1qVXdNekkzTURnek5UTTJXaGNOTWpnd016STJNRGd6TlRNMVdqQ0JtekUyTURRR0ExVUVBd3d0VTJWaGJDQlRhV2R1WVhSMWNtVWdRM0psWkdWdWRHbGhiSE1nYVc0Z1UwSllJR1p2Y2lCMFpYTjBhVzVuTVJnd0ZnWURWUVFGRXc5V1FWUkZVeTFDTmpBMk5EVTVNREF4R0RBV0JnTlZCR0VNRDFaQlZFVlRMVUkyTURZME5Ua3dNREVNTUFvR0ExVUVDZ3dEU1U0eU1SSXdFQVlEVlFRSERBbENZWEpqWld4dmJtRXhDekFKQmdOVkJBWVRBa1ZUTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFwSit6cEpPQnBCUzRtMUcwRkd6Ymx5WDRyQkp3bEM0WUxER2VKbHN4dkZpUXFzNDV2ZHNQYUdhMmNjaEl0aTNlTnlNWXI4SkU1aE9EUERneEY4bTViSGxxSTB1YVpCTnJaNXAxM3N2K0RwRjd1eVlNVXorQkl4dXQ4Ni9XdUYwdjlIM0pJbk1PTVN1STlIaWZ0aE11S25aeEc4NUEwU0ZhZllvL2xLTWR3akpKR2hJNkpYZit3YmVnemVIQVVHRDZmb2Z5Zm1IakxlZmcvVTNPYStnOVFNazNJT2syNzFISWloTkJXcHNjSzhnd1RPZTAyOFloQW12aTdEbENWNklVWnpDbjNSVTkxZHBtYjVOZkwwMUVzNG9ud2dXQjZ5YTJoR2J2ak4rd3ltSUFweG9JOVcrRE1wekJVazVtK1dDaUs4WnRNbE5KZXlnMnlDZ216TVlLOXdJREFRQUJvNElCK3pDQ0FmY3dEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU0NFNkdqQXBUT1lnM2dCclkzVmtGd1hFV3VLekIwQmdnckJnRUZCUWNCQVFSb01HWXdQZ1lJS3dZQkJRVUhNQUtHTW1oMGRIQTZMeTl3YTJrdVpHbG5hWFJsYkhSekxtVnpMMFJKUjBsVVJVeFVVMUZWUVV4SlJrbEZSRU5CUnpFdVkzSjBNQ1FHQ0NzR0FRVUZCekFCaGhob2RIUndPaTh2YjJOemNDNWthV2RwZEdWc2RITXVaWE13Z2F3R0ExVWRJQVNCcERDQm9UQ0JuZ1lMS3dZQkJBR0RwMUVLQWdFd2dZNHdQd1lJS3dZQkJRVUhBZ0VXTTJoMGRIQnpPaTh2Y0d0cExtUnBaMmwwWld4MGN5NWxjeTlrY0dNdlJFbEhTVlJGVEZSVFgwUlFReTUyTWk0eExuQmtaakJMQmdnckJnRUZCUWNDQWpBL0REMURaWEowYVdacFkyRmtieUJqZFdGc2FXWnBZMkZrYnlCa1pTQnpaV3hzYnlCaGRtRnVlbUZrYnlCa1pTQndaWEp6YjI1aElHcDFjbWxrYVdOaE1BOEdDU3NHQVFVRkJ6QUJCUVFDQlFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3SUdDQ3NHQVFVRkJ3TUVNRUlHQTFVZEh3UTdNRGt3TjZBMW9ET0dNV2gwZEhBNkx5OWpjbXd4TG5CcmFTNWthV2RwZEdWc2RITXVaWE12UkZSVFVYVmhiR2xtYVdWa1EwRkhNUzVqY213d0hRWURWUjBPQkJZRUZIOVV6QVlVZ1VzSHh1Rk5qY20vSzRLS1hSenJNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU5CZ2txaGtpRzl3MEJBUTBGQUFPQ0FnRUFzdU8xMG9QdHJOMEFkc056MXErZ2lzMlZoVEYvM0E4TzkxL0o0R2dqNkhQM1VGa0pPQmRoRGsvWURlKytZSEo0M014d2kzZDJCeC92SHJnWDF3c25CVGwydUhmQ25xMDFZbWJla0s3TmZzbXlGc3R5blAxM3dsWm5SMGtvb0RUc3Z2aXFqRzliVlFWR0JoaDJqemFvMHMrRTJwM1gxUGhrNkRkZlNUTnBESklSL1Z3eTVBa0J0MWRoMjRvZjhKMjFVM3FVaWhDbmw0cVl6ZEkvcmV1Qi9lR25pMkc2Z0tlS2hzSUswejdzZkl6bGYrbW1wR0l2RFk4VExPV1dtWUttMHFEQTFDVU5tZ0tDdWZQa1V4dW92S3FxbXVKajhuZnJRL0hZSFh2UlJibktCVk0xZ2pmbnNmWURuaVRneUJxak8vK1U4UHZaOVZnVG04V2R5VjBFQ3h5YzVJMUV6ZDZtRHdROERaSGhjMWZ4Q2tnTGk4MGxPQ29zV1NseElORmExNWJIQjVIOGhtQTM3dmhxSzN6L3EwMW9VUTJiYnVqS3dpbFRXdXFhUUM0cGgrODkrRVY4UXNiM09nZWdtZElmZHBUWU5vS0M5YWNFZTJjbXh3MEhaK1RPamdqSHd0dWVYUTUyVUhIbTlncGpETllsNTFPSmU1NnpPZFQza2VJamtIcExKSGVYZHA5VnpaWnJGRVBySE14VzhaRkFjWDgweEkrM1EveXRqVnBZZlZUdkkwT2s5eXhuazh0R04xdFdiTVhOeTRENFhtUWlKMFhxR25DQWJNT2VGNDlzVld6RjRKNVY2Skpsa0U5eFZhU2s5eHRWOWxjcjlSenVTT1NYU0J4YlQwRHlnajJtMFFFT0taSzFYQ0ZmNllmRWxBd3o1dFltdU0rM2dZYz0iLCJNSUlHVlRDQ0JEMmdBd0lCQWdJVUU2cDNYV2FxVjh3aWRUMEdnRmVjcTlNYkhsNHdEUVlKS29aSWh2Y05BUUVOQlFBd2diRXhJakFnQmdOVkJBTU1HVVJKUjBsVVJVd2dWRk1nUVVSV1FVNURSVVFnUTBFZ1J6SXhFakFRQmdOVkJBVVRDVUkwTnpRME56VTJNREVyTUNrR0ExVUVDd3dpUkVsSFNWUkZUQ0JVVXlCRFJWSlVTVVpKUTBGVVNVOU9JRUZWVkVoUFVrbFVXVEVvTUNZR0ExVUVDZ3dmUkVsSFNWUkZUQ0JQVGlCVVVsVlRWRVZFSUZORlVsWkpRMFZUSUZOTVZURVRNQkVHQTFVRUJ3d0tWbUZzYkdGa2IyeHBaREVMTUFrR0ExVUVCaE1DUlZNd0hoY05NalF3TlRJNU1USXdNRFF3V2hjTk16Y3dOVEkyTVRJd01ETTVXakNCc1RFaU1DQUdBMVVFQXd3WlJFbEhTVlJGVENCVVV5QkJSRlpCVGtORlJDQkRRU0JITWpFU01CQUdBMVVFQlJNSlFqUTNORFEzTlRZd01Tc3dLUVlEVlFRTERDSkVTVWRKVkVWTUlGUlRJRU5GVWxSSlJrbERRVlJKVDA0Z1FWVlVTRTlTU1ZSWk1TZ3dKZ1lEVlFRS0RCOUVTVWRKVkVWTUlFOU9JRlJTVlZOVVJVUWdVMFZTVmtsRFJWTWdVMHhWTVJNd0VRWURWUVFIREFwV1lXeHNZV1J2Ykdsa01Rc3dDUVlEVlFRR0V3SkZVekNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFNT1FhQkpHVW5Ldng0MEtaRDZFZXVZTVN4QUFjY3NIeU5KVzZxTW5rNjduT1BIQjk3Z2pSZ25zSnhlaFU4UVBneGhPYmhxN2tXYzAydlc4blFJUzJxeTcwSGpXK3k2SU1hT3RseWtzb05YT2N6UW9aQ25WcUJJaS9rRHNPaEZWMXJjRVhhaUJFVC9OdUlyU0t2R1lFSWR6QTlKYXFZZGZpL0pRL2xyWWF5RGZQM2Q3M2hzdXErbElqTjBkOWgrcEtjWXdML21JSWJLL2NRd2xsQVVtZGRyQXc5V0VtcWtsKzVSdURXcXBsRFdoaHZwR0pGUFh0NFJxS2dhYVZONVRVd1MyT0dKU05xQ3M2WkkrYVNkbmVUZ0NxcVEvLzgzaE45UXNtMG1CME44Tk85bHFTcENtUE9qWUdPVHA3SWs4aUI3dGV4MU9OeWVYTUhsOXpLRGNpcVYxNjJaUnBHdEptMnJ1ODZJVUNTalBsc3FUWE1uVzE0Mk1LdWdzVzNYNzFZMHF4M0RSVSszTHdnY0pxYU8xWS85RDJrUUVRSjN2NVplaUdRYXVSV3FmampBa0VSZ2grOG0zV1hYTHJuekFvRmhyUWRsQmExUTYxSTJVcWJxeGJBMGRTOUxkT3Q1K25GRlZabStFN0FBZVZ5cjhValZXVGRKUXZUTjN1cTBWa0wwbjJwcTAzK0hiNGdQUjh2cnBENzlKeWx5VWNJUjBRTklnTXRFRmU0ZUZKK2lDOSttYmVPanpIUWtsOFpHNTUxWDJLeTZzbDNPT25mOTNYZWRRRDB2RzByQ1lwUkdaKzUwazA1amx1S3pSamNpcUFDZ0xIQ0ZTcGNMeUJTS2dyWGNBMHFscFlEVEliZXg4OVR2UkdZMW5vd3JDNWxtR05UOGpKcnhDWU9ZREFnTUJBQUdqWXpCaE1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0h3WURWUjBqQkJnd0ZvQVVnaE9ob3dLVXptSU40QWEyTjFaQmNGeEZyaXN3SFFZRFZSME9CQllFRklJVG9hTUNsTTVpRGVBR3RqZFdRWEJjUmE0ck1BNEdBMVVkRHdFQi93UUVBd0lCaGpBTkJna3Foa2lHOXcwQkFRMEZBQU9DQWdFQUpHUUtyWjJVM0ovU3BHaFA3eldqdndlQlh4alc1dVNkeDBWN213djRtdkMyVmxDMVR2eEVuNXlWbmRFVUNwbEdwL20wUzNBMDdCdFBaMjRaU3VSdyttSXB0Qm1DaGJuVTF2ajJCRnBGRlRocHNRSkcwa0RqRDIzSG82cDNSdE1yaWI4SWkwUm5vVWJ3cFA1TjJMaWVPYnVvZDlPUzlxM01nQ2xoeTlGOTltT1d2RC9xNXZDVm8rdUxXWnVRNGFjdVRUTnhhNURIeWlqZ0IrR0dvMk9oSGxkclNwcCtMUmdVNWZrTktHMEx6aGxJRUdkRUJhbDBwdVovK1FxdFNyckxETVQ0WFBLV01KNmdwc3IzbFhmYmEwRWw3YmIvNzU2dE1ZQWJYem1ua2tVcWRpT0k1N3JWREZUOUZKeGpWZ281b1c4WE9LR1NMcU1IMzFYaUpDTm9INXJKWThWUTNabU1TdWg5N2tBQWhYdUZJYlFaN0Zya0YyeStHc0twYjBhOVpVcUZCckpsekh4Q0tsOFNTVHdmR0RnY3BlUFp4VUlJZ1BQY0k0b1h3Um9CMEhidDU0SXJSb0c3a1drNjhnWDJjaktWMFl0SG1WaEVFRnIzZGlaZk83bUFUQTU0c0xaWDluMWxvc25mOXhyZUV6ZEVZV2J5R1RoVXdsMzNNUDZYTGFGUlBkYm5Rc2hicm9lcHpnK25rc1U1VlZLMlpaRklXVlk2ZytSaElDWFZkaHFrQnBObStlSzArd1VDQTF0WFl5UktvU1VWcE1GU0FaaG5zeVVlWnphbVBIRGU0R2tUYW1NSzRxZlhLUU9iN0V0V1VXaDVmb1ZTemFxeXZGcHBVNFZNcC9nS3JQWUhENmJXckhKNXZDL0I3V3IvYVB0aE5rZ1hGTUdNclIwPSJdLCJ0eXAiOiJqb3NlIiwic2lnVCI6IjIwMjUtMTAtMjlUMTU6MTE6MjlaIiwiY3JpdCI6WyJzaWdUIl19.eyJzdWIiOiJ1cm46bmdzaS1sZDpwcm9kdWN0LXNwZWNpZmljYXRpb246YmE0MTIzZjUtNzdmMi00YjgwLThjOGQtMTNjMDFkM2E2ZTcyIiwibmJmIjoxNzI0Mjg0ODAwLCJpc3MiOiJkaWQ6ZWxzaTpWQVRFUy1CNjA2NDU5MDAiLCJleHAiOjE3NjEwOTEyMDAsImlhdCI6MTcyNDI4NDgwMCwidmMiOnsiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnL25zL2NyZWRlbnRpYWxzL3YyIiwiaHR0cHM6Ly93M2lkLm9yZy9nYWlhLXgvZGV2ZWxvcG1lbnQjIl0sImlkIjoidXJuOnV1aWQ6MTJlY2NlZTQtNmViOC00MDBmLThlMjItYTY4ZGJmNmVmNjU4IiwidHlwZSI6WyJneDpMYWJlbENyZWRlbnRpYWwiLCJWZXJpZmlhYmxlQ3JlZGVudGlhbCJdLCJpc3N1ZXIiOiJkaWQ6ZWxzaTpWQVRFUy1CNjA2NDU5MDAiLCJjcmVkZW50aWFsU3ViamVjdCI6eyJpZCI6InVybjpuZ3NpLWxkOnByb2R1Y3Qtc3BlY2lmaWNhdGlvbjpiYTQxMjNmNS03N2YyLTRiODAtOGM4ZC0xM2MwMWQzYTZlNzIiLCJneDpsYWJlbExldmVsIjoiQkwiLCJneDplbmdpbmVWZXJzaW9uIjoiMS4yLjEiLCJneDpydWxlc1ZlcnNpb24iOiJDRDI1LjAzIiwiZ3g6Y29tcGxpYW50Q3JlZGVudGlhbHMiOlt7ImlkIjoidXJuOmNyaXRlcmlhOmRwLTEiLCJ0eXBlIjoiZ3g6RGF0YVByb3RlY3Rpb24iLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6ZHAtMiIsInR5cGUiOiJneDpEYXRhUHJvdGVjdGlvbiIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpkcC0zIiwidHlwZSI6Imd4OkRhdGFQcm90ZWN0aW9uIiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifSx7ImlkIjoidXJuOmNyaXRlcmlhOmRwLTQiLCJ0eXBlIjoiZ3g6RGF0YVByb3RlY3Rpb24iLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6ZHAtNSIsInR5cGUiOiJneDpEYXRhUHJvdGVjdGlvbiIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpjcy0xIiwidHlwZSI6Imd4OkN5YmVyc2VjdXJpdHkiLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6Y3MtMiIsInR5cGUiOiJneDpDeWJlcnNlY3VyaXR5IiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifSx7ImlkIjoidXJuOmNyaXRlcmlhOmNzLTMiLCJ0eXBlIjoiZ3g6Q3liZXJzZWN1cml0eSIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpjcy00IiwidHlwZSI6Imd4OkN5YmVyc2VjdXJpdHkiLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6Y3MtNSIsInR5cGUiOiJneDpDeWJlcnNlY3VyaXR5IiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifSx7ImlkIjoidXJuOmNyaXRlcmlhOmNzLTYiLCJ0eXBlIjoiZ3g6Q3liZXJzZWN1cml0eSIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpjcy03IiwidHlwZSI6Imd4OkN5YmVyc2VjdXJpdHkiLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6Y3MtOCIsInR5cGUiOiJneDpDeWJlcnNlY3VyaXR5IiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifSx7ImlkIjoidXJuOmNyaXRlcmlhOmNzLTkiLCJ0eXBlIjoiZ3g6Q3liZXJzZWN1cml0eSIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpjcy0xMCIsInR5cGUiOiJneDpDeWJlcnNlY3VyaXR5IiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifSx7ImlkIjoidXJuOmNyaXRlcmlhOmNzLTExIiwidHlwZSI6Imd4OkN5YmVyc2VjdXJpdHkiLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6Y3MtMTIiLCJ0eXBlIjoiZ3g6Q3liZXJzZWN1cml0eSIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpjcy0xMyIsInR5cGUiOiJneDpDeWJlcnNlY3VyaXR5IiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifSx7ImlkIjoidXJuOmNyaXRlcmlhOmNzLTE0IiwidHlwZSI6Imd4OkN5YmVyc2VjdXJpdHkiLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6Y3MtMTUiLCJ0eXBlIjoiZ3g6Q3liZXJzZWN1cml0eSIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpjcy0xNiIsInR5cGUiOiJneDpDeWJlcnNlY3VyaXR5IiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifSx7ImlkIjoidXJuOmNyaXRlcmlhOmNzLTE3IiwidHlwZSI6Imd4OkN5YmVyc2VjdXJpdHkiLCJneDpkaWdlc3RTUkkiOiJzaGEyNTYtcGxTUldRVWR3OWo1SFJLYzQrR21oMnBJcUt1VDg1Y1gxMXRkSVY2c3F2TVx1MDAzZCJ9LHsiaWQiOiJ1cm46Y3JpdGVyaWE6Y3MtMTgiLCJ0eXBlIjoiZ3g6Q3liZXJzZWN1cml0eSIsImd4OmRpZ2VzdFNSSSI6InNoYTI1Ni1wbFNSV1FVZHc5ajVIUktjNCtHbWgycElxS3VUODVjWDExdGRJVjZzcXZNXHUwMDNkIn0seyJpZCI6InVybjpjcml0ZXJpYTpjcy0xOSIsInR5cGUiOiJneDpDeWJlcnNlY3VyaXR5IiwiZ3g6ZGlnZXN0U1JJIjoic2hhMjU2LXBsU1JXUVVkdzlqNUhSS2M0K0dtaDJwSXFLdVQ4NWNYMTF0ZElWNnNxdk1cdTAwM2QifV0sImd4OnZhbGlkYXRlZENyaXRlcmlhIjpbImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AyLjEuMSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AyLjEuMiIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AyLjEuMyIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1A1LjIuMSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AxLjEuNSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuMSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuMiIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuMyIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuNCIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuNSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuNiIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuNyIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuOCIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuOSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuMTAiLCJodHRwczovL3czaWQub3JnL2dhaWEteC9zcGVjcy9jZDI1LjAzL2NyaXRlcmlvbi9QMy4xLjExIiwiaHR0cHM6Ly93M2lkLm9yZy9nYWlhLXgvc3BlY3MvY2QyNS4wMy9jcml0ZXJpb24vUDMuMS4xMiIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuMTMiLCJodHRwczovL3czaWQub3JnL2dhaWEteC9zcGVjcy9jZDI1LjAzL2NyaXRlcmlvbi9QMy4xLjE0IiwiaHR0cHM6Ly93M2lkLm9yZy9nYWlhLXgvc3BlY3MvY2QyNS4wMy9jcml0ZXJpb24vUDMuMS4xNSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuMTYiLCJodHRwczovL3czaWQub3JnL2dhaWEteC9zcGVjcy9jZDI1LjAzL2NyaXRlcmlvbi9QMy4xLjE3IiwiaHR0cHM6Ly93M2lkLm9yZy9nYWlhLXgvc3BlY3MvY2QyNS4wMy9jcml0ZXJpb24vUDMuMS4xOSIsImh0dHBzOi8vdzNpZC5vcmcvZ2FpYS14L3NwZWNzL2NkMjUuMDMvY3JpdGVyaW9uL1AzLjEuMjAiXX0sInZhbGlkRnJvbSI6IjIwMjQtMDgtMjJUMDA6MDA6MDBaIiwidmFsaWRVbnRpbCI6IjIwMjUtMTAtMjJUMDA6MDA6MDBaIiwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6Imh0dHBzOi8vaXNzdWVyLmRvbWUtbWFya2V0cGxhY2Utc2J4Lm9yZy9iYWNrb2ZmaWNlL3YxL2NyZWRlbnRpYWxzL3N0YXR1cy8xI2RadjFXaUREUjVLYlc3R1VhU1YtUmciLCJ0eXBlIjoiUGxhaW5MaXN0RW50aXR5Iiwic3RhdHVzUHVycG9zZSI6InJldm9jYXRpb24iLCJzdGF0dXNMaXN0SW5kZXgiOiJkWnYxV2lERFI1S2JXN0dVYVNWLVJnIiwic3RhdHVzTGlzdENyZWRlbnRpYWwiOiJodHRwczovL2lzc3Vlci5kb21lLW1hcmtldHBsYWNlLXNieC5vcmcvYmFja29mZmljZS92MS9jcmVkZW50aWFscy9zdGF0dXMvMSJ9fSwianRpIjoidXJuOnV1aWQ6NjIwNjI4NzQtYzVlMS00ZGI0LWI5NjktNWE2MGQ1YmVhMGNkIn0.NSRjwV_9tZYPEX-ds4suTbR7x6Myhe_e2_lozYa5jhlMn0mJ3fyi0oujdnaKPQLMmAxXYrhfMb0Y-two-WIE5enM-6TOQpDSlvcyPRhhGEfnnU_i3K27bI0ghet8u5DUnQJrCDTxIEdAPlSfD5Pc5nLqpX0YK_58lsmX3jL4g7HWFibIlznMrMIPN-qI0zslcQfDfjqBGFoR2PBVvJEGYRsRy7tkuelLJLvSe-pVnz2Swu4P2e0mGBvgrAcjo0Fkoi0VZTxWNBJHSBurm8X60uqmZsjMFpXKgErX6EyhCiTuCjyJ12d0Rh7U6GwKyBqhY8tR4h8vGoOm4I2OmgdMQA";

            Map<String, Object> decodedVC = VCDecoderBasic.decode(vcToken);

            log.info("=== Decodifica VC ===");
            decodedVC.forEach((key, value) -> log.info(key," {} : {}", value));


            String labelLevel = VCDecoderBasic.extractLabelLevel(vcToken);
            log.info("== Label Level ==");
            log.info(labelLevel);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}